package gui;

import java.util.Stack;

import graph.MyEdge;
import graph.MyGraph;
import graph.MyNode;
import graph.QuadTree;
import util.DijkstraSP;

public class GuiMethods {
	private DrawGraph dg;
	private static GuiMethods instance;
	private static DijkstraSP dsp;
	private static QuadTree qt;
	private static MyGraph g;
	private static Stack<MyEdge> edgesOnPath = new Stack<MyEdge>();

	private GuiMethods() {
		setDrawGraphInstance();
	}

	public GuiMethods(MyGraph g, QuadTree qt) {
		dsp = new DijkstraSP(g);
		this.g = g;
	}

	public void zoomOut() {
		dg.zoomOut();
	}

	public void setDrawGraphInstance() {
		dg = DrawGraph.getInstance();
	}

	public static GuiMethods getInstance() {
		if(instance != null) return instance;
		else return new GuiMethods();
	}

	public static DijkstraSP getDijekstraInstance() {
		return dsp;
	}


	public int findNodeKDV(String edgeRoadName) {
		for(MyNode n : g.getNodeArray())
			for(MyEdge e : n.getEdges()) {
				if(e.getRoadName().equals(edgeRoadName)) {
					System.out.println("edge found!");
					return n.getKDV();
				}
			}
		return -1;
	}

	public void createPath(String textFromTextField, String textFromTextField2) {
		setDrawGraphInstance();
		
		int nodeFromKDV = findNodeKDV(textFromTextField);
		int nodeToKDV = findNodeKDV(textFromTextField2);

		if(nodeFromKDV == -1 || nodeToKDV == -1) {
			System.out.println("edges not found");
			return;
		}

		for(MyEdge e : edgesOnPath) {
			e.removeFromPath();
		}
		edgesOnPath.clear();
		
		System.out.println("kdv from: " + nodeFromKDV + " kdv to: " + nodeToKDV);

		// print shortest path
		Iterable<MyEdge> path = dsp.calculateShortestPath(nodeFromKDV, nodeToKDV);
		if(path != null) {
			for (MyEdge e : path) {
				System.out.println((e.getRoadName() + "   "));
				edgesOnPath.push(e);
				e.putOnPath();
			}
			dg.repaint();
		}
		else
			System.out.println("No path");
		System.out.println();
	}
}
